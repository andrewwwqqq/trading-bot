const puppeteer = require('puppeteer')

const delay = ms => new Promise(resolve => setTimeout(resolve, ms))

;(async () => {
	const urls = [
		'https://www.tradingview.com/chart/?symbol=BINANCE:AVAXUSDT&interval=7',
		'https://www.tradingview.com/chart/?symbol=BINANCE:ADAUSDT&interval=7',
	]

	for (const url of urls) {
		const browser = await puppeteer.launch({
			headless: false,
			args: ['--start-maximized'],
		})
		const page = await browser.newPage()

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		const cookies = [
			{
				name: 'sessionid',
				value: 'eictbpvvxxg8ocqvyr7jjhk205lfknnl',
				domain: '.tradingview.com',
			},
			{
				name: 'sessionid_sign',
				value: 'v3:0x18KSxoHi5nwUyFAvWWt+hAyMzuj5QXKFULA8bWB7s=',
				domain: '.tradingview.com',
			},
			{
				name: 'tv_ecuid',
				value: 'd637097c-674b-4b0e-a680-1f035be2d549',
				domain: '.tradingview.com',
			},
		]
		await page.setCookie(...cookies)

		console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞!')

		const [width, height] = [1920, 1080]
		await page.setViewport({ width, height })

		await page.goto(url, {
			waitUntil: 'networkidle2',
			timeout: 0,
		})

		// üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å aria-label="Object Tree and Data Window"
		const buttonExists = await page.evaluate(() => {
			const xpath = "//button[@aria-label='Object Tree and Data Window']"
			const result = document.evaluate(
				xpath,
				document,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			)
			return result.singleNodeValue !== null // true, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
		})

		if (buttonExists) {
			console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–∞–π–¥–µ–Ω–∞!')

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç aria-pressed
			const ariaPressed = await page.evaluate(() => {
				const button = document.querySelector(
					"button[aria-label='Object Tree and Data Window']"
				)
				return button ? button.getAttribute('aria-pressed') : null
			})

			if (ariaPressed === 'false') {
				console.log('‚ö° –ö–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...')
				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
				await page.click("button[aria-label='Object Tree and Data Window']")
				// –ñ–¥–µ–º, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏–µ aria-pressed —Å—Ç–∞–ª–æ true

				console.log(`ariaPressed after click ${ariaPressed}`)

				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			} else {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			}
		} else {
			console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
		}

		// –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "Data Window"
		const dataWindowButtonExists = await page.evaluate(() => {
			const xpath = "//span[contains(text(), 'Data Window')]" // –ò—â–µ–º span —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
			const result = document.evaluate(
				xpath,
				document,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			)
			const spanElement = result.singleNodeValue
			if (spanElement) {
				const button = spanElement.closest('button') // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π <button>
				if (button) {
					return button.getAttribute('aria-selected') // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ aria-selected
				}
			}
			return null // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
		})

		if (dataWindowButtonExists) {
			console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–∞–π–¥–µ–Ω–∞!')

			if (dataWindowButtonExists === 'false') {
				console.log('‚ö° –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...')
				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
				await page.evaluate(() => {
					const xpath = "//span[contains(text(), 'Data Window')]" // –ò—â–µ–º span —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
					const result = document.evaluate(
						xpath,
						document,
						null,
						XPathResult.FIRST_ORDERED_NODE_TYPE,
						null
					)
					const spanElement = result.singleNodeValue
					if (spanElement) {
						const button = spanElement.closest('button') // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π <button>
						if (button) {
							button.click() // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
						}
					}
				})
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			} else {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			}
		} else {
			console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
		}

		const tl1ButtonExists = await page.evaluate(() => {
			const xpath = "//span[contains(text(), 'TL 1.0')]" // –ò—â–µ–º span —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
			const result = document.evaluate(
				xpath,
				document,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			)
			const spanElement = result.singleNodeValue
			return spanElement !== null // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ span –Ω–∞–π–¥–µ–Ω
		})

		if (tl1ButtonExists) {
			console.log('‚úÖ –°–ø–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "TL 1.0" –Ω–∞–π–¥–µ–Ω!')
		} else {
			console.log('‚ùå –°–ø–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "TL 1.0" –Ω–µ –Ω–∞–π–¥–µ–Ω!')

			// –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ aria-label –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
			const indicatorButtonExists = await page.evaluate(() => {
				const xpath =
					"//button[@aria-label='Indicators, metrics, and strategies']" // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ aria-label
				const result = document.evaluate(
					xpath,
					document,
					null,
					XPathResult.FIRST_ORDERED_NODE_TYPE,
					null
				)
				const button = result.singleNodeValue
				return button !== null // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
			})

			if (indicatorButtonExists) {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–∞–π–¥–µ–Ω–∞!')

				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
				await page.evaluate(() => {
					const button = document.querySelector(
						"button[aria-label='Indicators, metrics, and strategies']"
					)
					if (button) {
						button.click() // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
					}
				})

				console.log(
					'‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!'
				)

				while (true) {
					console.log('while start')
					// –°–æ–∑–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç
					const inviteOnlyElementExists = await page.evaluate(() => {
						const xpath = "//span[contains(text(), 'Invite-only')]" // –ò—â–µ–º span —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
						const result = document.evaluate(
							xpath,
							document,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const spanElement = result.singleNodeValue
						if (spanElement) {
							const parentDiv = spanElement.closest('div') // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π <div>
							if (parentDiv) {
								parentDiv.click() // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É <div>
								console.log('parent div')
								console.log(parentDiv)
								return true // –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏
							} else {
								console.log(
									'–ù–µ –Ω–∞—à–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —É span —Å —Ç–µ–∫—Å—Ç–æ–º "Invite-only"'
								)
							}
						} else {
							console.log('–ù–µ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "Invite-only"')
						}
						return false // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
					})

					if (inviteOnlyElementExists) {
						console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º "Invite-only" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!')
						break // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
					}

					console.log(
						'‚ùå –≠–ª–µ–º–µ–Ω—Ç "Invite-only" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...'
					)
					await delay(2000)
				}

				const checkAndClickIndicator = async page => {
					const indicatorExists = await page.evaluate(() => {
						const xpath = "//div[@data-title='Indicator - TL 1.0']" // –ò—â–µ–º div —Å –Ω—É–∂–Ω—ã–º data-title
						const result = document.evaluate(
							xpath,
							document,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const divElement = result.singleNodeValue // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π div

						if (divElement) {
							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ div –µ—Å—Ç—å span —Å —Ç–µ–∫—Å—Ç–æ–º "Indicator - TL 1.0"
							const spanText = divElement.querySelector('span.title-cIIj4HrJ')
							const isTextCorrect =
								spanText && spanText.textContent === 'Indicator - TL 1.0'

							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ div –µ—Å—Ç—å <a> —Å href="/u/igoraa500/"
							const link = divElement.querySelector('a[href="/u/igoraa500/"]')
							const isLinkCorrect = link !== null

							if (isTextCorrect && isLinkCorrect) {
								console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–π–¥–µ–Ω!')

								// –ö–ª–∏–∫–∞–µ–º –ø–æ div
								divElement.click()
								console.log('‚úÖ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω!')

								return true // –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
							} else {
								console.log('‚ùå –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:')
								if (!isTextCorrect) console.log('  - –ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ span')
								if (!isLinkCorrect) console.log('  - –ù–µ—Ç –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ <a>')
							}
						} else {
							console.log(
								'‚ùå –≠–ª–µ–º–µ–Ω—Ç —Å data-title="Indicator - TL 1.0" –Ω–µ –Ω–∞–π–¥–µ–Ω!'
							)
						}

						return false // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
					})

					return indicatorExists
				}

				// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
				const indicatorFound = await checkAndClickIndicator(page)
				if (indicatorFound) {
					// –î–∞–ª–µ–µ, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –Ω–∏–º —Ä–∞–±–æ—Ç—É
					console.log('–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...')

					const closeButtonExists = await page.evaluate(() => {
						const xpath = "//button[@data-name='close']" // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É data-name="close"
						const result = document.evaluate(
							xpath,
							document,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const button = result.singleNodeValue

						if (button) {
							console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Close" –Ω–∞–π–¥–µ–Ω–∞!')
							button.click() // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
							console.log('‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "Close" –≤—ã–ø–æ–ª–Ω–µ–Ω!')
							return true
						} else {
							console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "Close" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
							return false
						}
					})

					// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
					if (closeButtonExists) {
						console.log('–ö–Ω–æ–ø–∫–∞ "Close" –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞.')
					} else {
						console.log('–ö–Ω–æ–ø–∫–∞ "Close" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
					}
				} else {
					console.log('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è–º.')
				}
			} else {
				console.error(
					'‚ùå –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'
				)
			}
		}

		// –û–∂–∏–¥–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
		const expectedColors = [
			'rgb(255, 82, 82)', // 1, 5
			'rgb(255, 152, 0)', // 2, 6
			'rgb(76, 175, 80)', // 3, 7
			'rgb(49, 27, 146)', // 4, 8
		]

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö span –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö div —Å "Shapes"
		const getSpans = async () => {
			return await page.evaluate(expectedColors => {
				const xpath = "//div[contains(text(), 'Shapes')]"
				const result = document.evaluate(
					xpath,
					document,
					null,
					XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,
					null
				)

				const spans = []

				for (let i = 0; i < result.snapshotLength && spans.length < 8; i++) {
					const shapesDiv = result.snapshotItem(i)
					if (!shapesDiv || !shapesDiv.parentElement) continue

					const span = shapesDiv.parentElement.querySelector('span')
					if (span) {
						const color = span.style.color
						const text = span.innerText.trim()
						const expectedColor = expectedColors[i % 4] // –¶–≤–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
						const isValid = color === expectedColor // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è

						spans.push({ color, text, isValid })
					}
				}

				return spans
			}, expectedColors)
		}

		// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
		const validateColors = spans => {
			spans.forEach((span, index) => {
				if (span.isValid) {
					console.log(
						`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${index + 1} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: ${span.color}, —Ç–µ–∫—Å—Ç: "${
							span.text
						}"`
					)
				} else {
					console.error(
						`‚ùå –û—à–∏–±–∫–∞! –≠–ª–µ–º–µ–Ω—Ç ${index + 1}: –æ–∂–∏–¥–∞–ª—Å—è —Ü–≤–µ—Ç ${
							expectedColors[index % 4]
						}, –Ω–æ –ø–æ–ª—É—á–µ–Ω ${span.color}`
					)
				}
			})
		}

		// üî• –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤
		let previousSpans = await getSpans()
		console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è span:', previousSpans)
		validateColors(previousSpans)

		// üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 20 –º—Å
		setInterval(async () => {
			const currentSpans = await getSpans()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
			let hasChanges = false

			currentSpans.forEach((span, index) => {
				if (
					span.color !== previousSpans[index]?.color ||
					span.text !== previousSpans[index]?.text
				) {
					hasChanges = true
				}
			})

			// –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
			if (hasChanges) {
				console.log('tl –∏–∑–º–µ–Ω–∏–ª—Å—è: ')
				console.log(currentSpans)
				validateColors(currentSpans)
				previousSpans = currentSpans
			}
		}, 20)

		await delay(3000)
	}
})()

// const delay = ms => new Promise(resolve => setTimeout(resolve, ms))

// const browser = await puppeteer.launch({
// 	headless: false,
// 	args: ['--start-maximized'],
// })
// const page = await browser.newPage()

// // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// const cookies = [
// 	{
// 		name: 'sessionid',
// 		value: 'eictbpvvxxg8ocqvyr7jjhk205lfknnl',
// 		domain: '.tradingview.com',
// 	},
// 	{
// 		name: 'sessionid_sign',
// 		value: 'v3:0x18KSxoHi5nwUyFAvWWt+hAyMzuj5QXKFULA8bWB7s=',
// 		domain: '.tradingview.com',
// 	},
// 	{
// 		name: 'tv_ecuid',
// 		value: 'd637097c-674b-4b0e-a680-1f035be2d549',
// 		domain: '.tradingview.com',
// 	},
// ]
// await page.setCookie(...cookies)

// console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞!')

// const [width, height] = [1920, 1080] // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, FullHD)
// await page.setViewport({ width, height })

// // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É TradingView
// await page.goto(
// 	'https://www.tradingview.com/chart/?symbol=BINANCE:AVAXUSDT&interval=7',
// 	{
// 		waitUntil: 'domcontentloaded',
// 	}
// )

// // –ñ–¥—ë–º, –ø–æ–∫–∞ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "Indicators"
// await page.waitForSelector(
// 	'button[aria-label="Indicators, metrics, and strategies"]',
// 	{ timeout: 10000 }
// )
// await page.click('button[aria-label="Indicators, metrics, and strategies"]')

// // –ñ–¥—ë–º –≤–∫–ª–∞–¥–∫–∏ –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π (invite tab)
// await page.waitForSelector('.tab-nGEmjtaX', { timeout: 10000 })
// await delay(3000) // –ó–∞–º–µ–Ω—è–µ–º setTimeout –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫—É —Å Promise

// const tabs = await page.$$('.tab-nGEmjtaX')
// if (tabs.length > 0) {
// 	await tabs[tabs.length - 1].click()
// }

// // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞
// await page.waitForSelector('div.container-WeNdU0sq a[href="/u/igoraa500/"]', {
// 	timeout: 10000,
// })

// // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ div.container-WeNdU0sq
// const allContainers = await page.$$('div.container-WeNdU0sq')

// let targetIndex = -1

// // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
// for (let i = 0; i < allContainers.length; i++) {
// 	const link = await allContainers[i].$('a[href="/u/igoraa500/"]')
// 	if (link) {
// 		targetIndex = i
// 		break // –ù–∞—à–ª–∏ –Ω—É–∂–Ω—ã–π div, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
// 	}
// }

// if (targetIndex !== -1) {
// 	// –ö–ª–∏–∫–∞–µ–º –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
// 	await allContainers[targetIndex].click()
// } else {
// 	console.log('–ù–µ –Ω–∞–π–¥–µ–Ω div.container-WeNdU0sq —Å –Ω—É–∂–Ω–æ–π —Å—Å—ã–ª–∫–æ–π.')
// }

// // –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –∏ –∫–ª–∏–∫–∞–µ–º
// await page.waitForSelector('.nav-button-znwuaSC1', { timeout: 10000 })
// await page.click('.nav-button-znwuaSC1')

// try {
// 	// –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º overview
// 	await page.waitForSelector('button[aria-label="Collapse panel"]', {
// 		timeout: 5000,
// 	})
// 	await page.click('button[aria-label="Collapse panel"]')
// } catch (error) {
// 	console.log("–ö–Ω–æ–ø–∫–∞ 'Collapse panel' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
// }

// // –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É
// await page.waitForSelector(
// 	'button[aria-label="Object Tree and Data Window"]',
// 	{
// 		timeout: 10000,
// 	}
// )

// // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É
// const button = await page.$(
// 	'button[aria-label="Object Tree and Data Window"]'
// )

// if (button) {
// 	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ—ë –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å
// 	const hasActiveClass = await page.evaluate(
// 		el => el.classList.contains('isActive-I_wb5FjE'),
// 		button
// 	)

// 	if (!hasActiveClass) {
// 		await button.click() // –ö–ª–∏–∫–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç
// 		console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞')
// 	} else {
// 		console.log('‚ö° –ö–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫ –Ω–µ –Ω—É–∂–µ–Ω')
// 	}
// }

// // –ö–ª–∏–∫–∞–µ–º –ø–æ "Data Window"
// await page.waitForSelector('#data-window', { timeout: 10000 })
// await page.click('#data-window')

// // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è .values-_gbYDtbd
// await page.waitForSelector('.values-_gbYDtbd', { timeout: 10000 })

// let tlItemsValue = [] // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

// async function checkTLValues() {
// 	const allValues = await page.$$('.values-_gbYDtbd')
// 	if (allValues.length < 3) return console.log('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.')

// 	const thirdValue = allValues[2] // 3-–π —ç–ª–µ–º–µ–Ω—Ç
// 	const tlItems = await thirdValue.$$('.item-_gbYDtbd')

// 	let newValues = []
// 	for (const item of tlItems) {
// 		const span = await item.$('span')
// 		if (span) {
// 			const text = await page.evaluate(el => el.textContent.trim(), span)
// 			newValues.push(text)
// 		}
// 	}

// 	// ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–±–µ–∑ JSON.stringify)
// 	if (
// 		newValues.length !== tlItemsValue.length ||
// 		newValues.some((val, i) => val !== tlItemsValue[i])
// 	) {
// 		console.log('‚ö° –î–∞–Ω–Ω—ã–µ TL –æ–±–Ω–æ–≤–∏–ª–∏—Å—å:', newValues)
// 		tlItemsValue = [...newValues] // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
// 	}

// 	setTimeout(checkTLValues, 20)
// }

// // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
// checkTLValues()
