const puppeteer = require('puppeteer')
const { cookies, urls, currencies } = require('./constants')
const { delay, sendTlData } = require('./share')
const { sendMessageToGroup } = require('./telegram-bot')
const {
	findObjectTreeButtonData,
	doObjectTreeButtonActive,
	findDataWindowButtonData,
	doDataWindowButtonActive,
	findTl1Indicator,
	findChooseIndicatorButtonData,
	doChooseIndicatorButtonActive,
	findInviteOnlyData,
	findIndicatorData,
	findCloseIndicatorsButtonData,
	clickCloseIndicatorsButton,
	getShapesData,
	validateColors,
} = require('./core')

;(async () => {
	for (let index = 0; index < urls.length; index++) {
		const url = urls[index]

		const browser = await puppeteer.launch({
			headless: false,
			args: ['--start-maximized'],
		})
		const page = await browser.newPage()

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

		await page.setCookie(...cookies)

		console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞!')
		await sendMessageToGroup(
			`${currencies[index]} :‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞!`
		)

		const [width, height] = [1920, 1080]
		await page.setViewport({ width, height })

		await page.goto(url, {
			waitUntil: 'networkidle2',
			timeout: 0,
		})

		// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É Object Tree and Data Window –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë –∞—Ç—Ä–∏–±—É—Ç aria-pressed
		const objectTreeButtonData = await findObjectTreeButtonData(page)

		// –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ Object Tree and Data Window –Ω–∞–π–¥–µ–Ω–∞
		if (objectTreeButtonData.found) {
			console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–∞–π–¥–µ–Ω–∞!')
			await sendMessageToGroup(
				`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–∞–π–¥–µ–Ω–∞!`
			)

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ Object Tree and Data Window
			if (objectTreeButtonData.ariaPressed === 'false') {
				console.log(
					'‚ö° –ö–Ω–æ–ø–∫–∞  "Object Tree and Data Window" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...'
				)
				await sendMessageToGroup(
					`${currencies[index]} :‚ö° –ö–Ω–æ–ø–∫–∞  "Object Tree and Data Window" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...`
				)

				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ XPath
				await doObjectTreeButtonActive(page, objectTreeButtonData)
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞  "Object Tree and Data Window" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')

				await sendMessageToGroup(
					`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞  "Object Tree and Data Window" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`
				)
			} else {
				console.log(
					'‚úÖ –ö–Ω–æ–ø–∫–∞  "Object Tree and Data Window" —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!'
				)
				await sendMessageToGroup(
					`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞  "Object Tree and Data Window" —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`
				)
			}
		} else {
			console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
			await sendMessageToGroup(
				`${currencies[index]} : ‚ùå –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`
			)
		}
		// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Data Window" –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë –∞—Ç—Ä–∏–±—É—Ç aria-selected
		const dataWindowButtonData = await findDataWindowButtonData(page)

		// –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ Data Window –Ω–∞–π–¥–µ–Ω–∞
		if (dataWindowButtonData.found) {
			console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–∞–π–¥–µ–Ω–∞!')
			await sendMessageToGroup(
				`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–∞–π–¥–µ–Ω–∞!`
			)
			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ Data Window
			if (dataWindowButtonData.ariaSelected === 'false') {
				console.log('‚ö° –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...')
				await sendMessageToGroup(
					`${currencies[index]} :‚ö° –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...`
				)
				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ XPath
				await doDataWindowButtonActive(page, dataWindowButtonData)
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
				await sendMessageToGroup(
					`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`
				)
			} else {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
				await sendMessageToGroup(
					`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`
				)
			}
		} else {
			console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
			await sendMessageToGroup(
				`${currencies[index]} : ‚ùå –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`
			)
		}

		// üîç –∏—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "TL 1.0" –Ω–∞ –ø–∞–Ω–µ–ª–∏
		const tl1Indicator = await findTl1Indicator(page)

		// –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "TL 1.0" –Ω–∞ –ø–∞–Ω–µ–ª–∏
		if (tl1Indicator.found) {
			console.log('‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "TL 1.0" –Ω–∞ –ø–∞–Ω–µ–ª–∏ –µ—Å—Ç—å')

			await sendMessageToGroup(
				`${currencies[index]} :‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "TL 1.0" –Ω–∞ –ø–∞–Ω–µ–ª–∏ –µ—Å—Ç—å`
			)
		} else {
			console.log('‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "TL 1.0" –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–µ—Ç—É!')
			await sendMessageToGroup(
				`${currencies[index]} :‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "TL 1.0" –Ω–∞ –ø–∞–Ω–µ–ª–∏ –Ω–µ—Ç—É`
			)
			// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
			const chooseIndicatorButtonData = await findChooseIndicatorButtonData(
				page
			)

			// –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
			if (chooseIndicatorButtonData.found) {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–∞–π–¥–µ–Ω–∞!')
				await sendMessageToGroup(
					`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–∞–π–¥–µ–Ω–∞!`
				)
				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ XPath
				await doChooseIndicatorButtonActive(page, chooseIndicatorButtonData)

				console.log(
					'‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!'
				)
				await sendMessageToGroup(
					`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`
				)
				// üîç –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ –≤–∫–ª–∞–¥–∫–∏ "Invite-only"
				while (true) {
					console.log('‚è≥ –ò—â–µ–º —Ç–∞–± "Invite-only"...')
					await sendMessageToGroup(
						`${currencies[index]} :‚è≥ –ò—â–µ–º —Ç–∞–± "Invite-only"...`
					)

					const inviteOnlyData = await findInviteOnlyData(page)

					if (inviteOnlyData.found) {
						console.log('‚úÖ –¢–∞–± "Invite-only" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!')
						await sendMessageToGroup(
							`${currencies[index]} :‚úÖ –¢–∞–± "Invite-only" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!`
						)

						break
					}

					console.log(
						'‚ùå –≠–ª–µ–º–µ–Ω—Ç "Invite-only" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...'
					)
					await sendMessageToGroup(
						`${currencies[index]} :‚ùå –≠–ª–µ–º–µ–Ω—Ç "Invite-only" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`
					)
					await delay(2000)
				}

				// üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ "Indicator - TL 1.0"
				const indicatorData = await findIndicatorData(page)

				if (indicatorData.found) {
					console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç "Indicator - TL 1.0" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!')
					await sendMessageToGroup(
						`${currencies[index]} :‚úÖ –≠–ª–µ–º–µ–Ω—Ç "Indicator - TL 1.0" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!`
					)
					// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
					const closeIndicatorsButtonData = await findCloseIndicatorsButtonData(
						page
					)

					if (closeIndicatorsButtonData.found) {
						console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Close indicators" –Ω–∞–π–¥–µ–Ω–∞.')
						await sendMessageToGroup(
							`${currencies[index]} :‚úÖ –ö–Ω–æ–ø–∫–∞ "Close indicators" –Ω–∞–π–¥–µ–Ω–∞.`
						)

						await clickCloseIndicatorsButton(
							page,
							closeIndicatorsButtonData,
							index
						)
					} else {
						console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "Close" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
						await sendMessageToGroup(
							`${currencies[index]} :‚ùå –ö–Ω–æ–ø–∫–∞ "Close" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`
						)
					}
				} else {
					console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç "Indicator - TL 1.0" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
					await sendMessageToGroup(
						`${currencies[index]} :‚ùå –≠–ª–µ–º–µ–Ω—Ç "Indicator - TL 1.0" –Ω–µ –Ω–∞–π–¥–µ–Ω.`
					)
				}
			} else {
				console.error(
					'‚ùå –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'
				)
				await sendMessageToGroup(
					`${currencies[index]} :‚ùå –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`
				)
			}
		}

		// üî• –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π tl
		let previousShapesData = await getShapesData(page)
		console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è tl:', previousShapesData)
		await sendMessageToGroup(
			`${currencies[index]} :üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è tl —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`
		)
		const isValidColorOfElements = validateColors(previousShapesData)

		if (isValidColorOfElements) {
			await sendTlData(previousShapesData, index)
		} else {
			console.log('‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π tl, –ª–∏–±–æ —Ü–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å')
			await sendMessageToGroup(
				`${currencies[index]} :‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π tl, –ª–∏–±–æ —Ü–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å`
			)
		}

		// üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ n –º—Å
		setInterval(async () => {
			const currentShapesData = await getShapesData(page)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
			let hasChanges = false

			currentShapesData.forEach((currentShapeData, index) => {
				if (
					currentShapeData.color !== previousShapesData[index]?.color ||
					currentShapeData.text !== previousShapesData[index]?.text
				) {
					hasChanges = true
				}
			})

			// –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
			if (hasChanges) {
				console.log('tl –∏–∑–º–µ–Ω–∏–ª—Å—è: ')
				await sendMessageToGroup(`${currencies[index]} :üìä tl –∏–∑–º–µ–Ω–∏–ª—Å—è`)
				console.log(currentShapesData)

				const isValidColorOfElements = validateColors(currentShapesData)
				previousShapesData = currentShapesData

				if (isValidColorOfElements) {
					await sendTlData(previousShapesData, index)
				} else {
					console.log(
						'‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π tl, –ª–∏–±–æ —Ü–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å'
					)

					await sendMessageToGroup(
						`${currencies[index]} :‚ùå –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π tl, –ª–∏–±–æ —Ü–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å`
					)
				}
			}
		}, 20)

		await delay(3000)
	}
})()
