const puppeteer = require('puppeteer')

const delay = ms => new Promise(resolve => setTimeout(resolve, ms))
const API_URL = 'http://localhost:3000' // –£–∫–∞–∂–∏ URL —Å–µ—Ä–≤–µ—Ä–∞

;(async () => {
	const urls = [
		'https://www.tradingview.com/chart/?symbol=BINANCE:AVAXUSDT&interval=7',
		// 'https://www.tradingview.com/chart/?symbol=BINANCE:ADAUSDT&interval=7',
	]

	const currencies = ['AVAXUSDT', 'ADAUSDT']

	for (let index = 0; index < urls.length; index++) {
		const url = urls[index]

		const browser = await puppeteer.launch({
			headless: false,
			args: ['--start-maximized'],
		})
		const page = await browser.newPage()

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		const cookies = [
			{
				name: 'sessionid',
				value: 'eictbpvvxxg8ocqvyr7jjhk205lfknnl',
				domain: '.tradingview.com',
			},
			{
				name: 'sessionid_sign',
				value: 'v3:0x18KSxoHi5nwUyFAvWWt+hAyMzuj5QXKFULA8bWB7s=',
				domain: '.tradingview.com',
			},
			{
				name: 'tv_ecuid',
				value: 'd637097c-674b-4b0e-a680-1f035be2d549',
				domain: '.tradingview.com',
			},
		]
		await page.setCookie(...cookies)

		console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies —É—Å–ø–µ—à–Ω–∞!')

		const [width, height] = [1920, 1080]
		await page.setViewport({ width, height })

		await page.goto(url, {
			waitUntil: 'networkidle2',
			timeout: 0,
		})

		// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë –∞—Ç—Ä–∏–±—É—Ç aria-pressed
		const objectTreeButtonData = await page.evaluate(() => {
			const xpath = "//button[@aria-label='Object Tree and Data Window']"
			const result = document.evaluate(
				xpath,
				document,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			)
			const button = result.singleNodeValue

			if (button) {
				return {
					found: true,
					ariaPressed: button.getAttribute('aria-pressed'),
					xpath: xpath, // –°–æ—Ö—Ä–∞–Ω—è–µ–º XPath, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–ª–∏–∫–Ω—É—Ç—å
				}
			}
			return { found: false }
		})

		if (objectTreeButtonData.found) {
			console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–∞–π–¥–µ–Ω–∞!')

			if (objectTreeButtonData.ariaPressed === 'false') {
				console.log('‚ö° –ö–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...')

				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ XPath
				await page.evaluate(xpath => {
					const result = document.evaluate(
						xpath,
						document,
						null,
						XPathResult.FIRST_ORDERED_NODE_TYPE,
						null
					)
					const button = result.singleNodeValue
					if (button) button.click()
				}, objectTreeButtonData.xpath)

				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			} else {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			}
		} else {
			console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "Object Tree and Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
		}

		// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Data Window" –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë –∞—Ç—Ä–∏–±—É—Ç aria-selected
		const dataWindowButtonData = await page.evaluate(() => {
			const xpath = "//button[@id='data-window']"
			const result = document.evaluate(
				xpath,
				document,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			)
			const button = result.singleNodeValue

			if (button) {
				return {
					found: true,
					ariaSelected: button.getAttribute('aria-selected'),
					xpath: xpath, // –°–æ—Ö—Ä–∞–Ω—è–µ–º XPath, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–ª–∏–∫–Ω—É—Ç—å
				}
			}
			return { found: false }
		})

		if (dataWindowButtonData.found) {
			console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–∞–π–¥–µ–Ω–∞!')

			if (dataWindowButtonData.ariaSelected === 'false') {
				console.log('‚ö° –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∫–ª–∏–∫–∞–µ–º...')

				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ XPath
				await page.evaluate(xpath => {
					const result = document.evaluate(
						xpath,
						document,
						null,
						XPathResult.FIRST_ORDERED_NODE_TYPE,
						null
					)
					const button = result.singleNodeValue
					if (button) button.click()
				}, dataWindowButtonData.xpath)

				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			} else {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Data Window" —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
			}
		} else {
			console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "Data Window" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
		}

		// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "TL 1.0" (span) –æ–¥–∏–Ω —Ä–∞–∑
		const tl1ButtonData = await page.evaluate(() => {
			const xpath = "//span[contains(text(), 'TL 1.0')]"
			const result = document.evaluate(
				xpath,
				document,
				null,
				XPathResult.FIRST_ORDERED_NODE_TYPE,
				null
			)
			return { found: result.singleNodeValue !== null }
		})

		if (tl1ButtonData.found) {
			console.log('‚úÖ –°–ø–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "TL 1.0" –Ω–∞–π–¥–µ–Ω!')
		} else {
			console.log('‚ùå –°–ø–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º "TL 1.0" –Ω–µ –Ω–∞–π–¥–µ–Ω!')

			// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Indicators, metrics, and strategies"
			const indicatorButtonData = await page.evaluate(() => {
				const xpath =
					"//button[@aria-label='Indicators, metrics, and strategies']"
				const result = document.evaluate(
					xpath,
					document,
					null,
					XPathResult.FIRST_ORDERED_NODE_TYPE,
					null
				)
				const button = result.singleNodeValue
				return {
					found: button !== null,
					xpath: xpath,
				}
			})

			if (indicatorButtonData.found) {
				console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–∞–π–¥–µ–Ω–∞!')

				// –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —á–µ—Ä–µ–∑ XPath
				await page.evaluate(xpath => {
					const result = document.evaluate(
						xpath,
						document,
						null,
						XPathResult.FIRST_ORDERED_NODE_TYPE,
						null
					)
					const button = result.singleNodeValue
					if (button) button.click()
				}, indicatorButtonData.xpath)

				console.log(
					'‚úÖ –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!'
				)

				// üîç –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞ "Invite-only"
				while (true) {
					console.log('‚è≥ –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç "Invite-only"...')

					const inviteOnlyData = await page.evaluate(() => {
						const xpath = "//span[contains(text(), 'Invite-only')]"
						const result = document.evaluate(
							xpath,
							document,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const spanElement = result.singleNodeValue

						if (spanElement) {
							const parentDiv = spanElement.closest('div')
							if (parentDiv) {
								parentDiv.click()
								return { found: true }
							}
						}
						return { found: false }
					})

					if (inviteOnlyData.found) {
						console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç "Invite-only" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!')
						break
					}

					console.log(
						'‚ùå –≠–ª–µ–º–µ–Ω—Ç "Invite-only" –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...'
					)
					await delay(2000)
				}

				// üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ "Indicator - TL 1.0"
				const indicatorData = await page.evaluate(() => {
					const xpath = "//div[@data-title='Indicator - TL 1.0']"
					const result = document.evaluate(
						xpath,
						document,
						null,
						XPathResult.FIRST_ORDERED_NODE_TYPE,
						null
					)
					const divElement = result.singleNodeValue

					if (divElement) {
						// –ò—â–µ–º span —Å —Ç–µ–∫—Å—Ç–æ–º "Indicator - TL 1.0" —á–µ—Ä–µ–∑ XPath
						const spanXpath = ".//span[text()='Indicator - TL 1.0']" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π XPath –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ div
						const spanResult = document.evaluate(
							spanXpath,
							divElement,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const spanElement = spanResult.singleNodeValue

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –Ω—É–∂–Ω—ã–π span
						const isTextCorrect = spanElement !== null

						// –ò—â–µ–º —Å—Å—ã–ª–∫—É <a> —Å href="/u/igoraa500/" —á–µ—Ä–µ–∑ XPath
						const linkXpath = ".//a[@href='/u/igoraa500/']" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π XPath –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ div
						const linkResult = document.evaluate(
							linkXpath,
							divElement,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const linkElement = linkResult.singleNodeValue

						const isLinkCorrect = linkElement !== null

						if (isTextCorrect && isLinkCorrect) {
							divElement.click() // –ö–ª–∏–∫–∞–µ–º –ø–æ div, –µ—Å–ª–∏ –æ–±–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
							return { found: true }
						}
					}

					return { found: false }
				})

				if (indicatorData.found) {
					console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç "Indicator - TL 1.0" –Ω–∞–π–¥–µ–Ω –∏ –∫–ª–∏–∫–Ω—É—Ç!')

					// üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
					const closeButtonData = await page.evaluate(() => {
						const xpath = "//button[@data-name='close']"
						const result = document.evaluate(
							xpath,
							document,
							null,
							XPathResult.FIRST_ORDERED_NODE_TYPE,
							null
						)
						const button = result.singleNodeValue

						if (button) {
							button.click()
							return { found: true }
						}
						return { found: false }
					})

					if (closeButtonData.found) {
						console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "Close" –Ω–∞–∂–∞—Ç–∞.')
					} else {
						console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "Close" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
					}
				} else {
					console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç "Indicator - TL 1.0" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
				}
			} else {
				console.error(
					'‚ùå –ö–Ω–æ–ø–∫–∞ "Indicators, metrics, and strategies" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'
				)
			}
		}

		return

		// –û–∂–∏–¥–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
		const expectedColors = [
			'rgb(255, 82, 82)', // 1, 5
			'rgb(255, 152, 0)', // 2, 6
			'rgb(76, 175, 80)', // 3, 7
			'rgb(49, 27, 146)', // 4, 8
		]

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö span –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö div —Å "Shapes"
		const getSpans = async () => {
			return await page.evaluate(expectedColors => {
				const xpath = "//div[contains(text(), 'Shapes')]"
				const result = document.evaluate(
					xpath,
					document,
					null,
					XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,
					null
				)

				const spans = []

				for (let i = 0; i < result.snapshotLength && spans.length < 8; i++) {
					const shapesDiv = result.snapshotItem(i)
					if (!shapesDiv || !shapesDiv.parentElement) continue

					const span = shapesDiv.parentElement.querySelector('span')
					if (span) {
						const color = span.style.color
						const text = span.innerText.trim()
						const expectedColor = expectedColors[i % 4] // –¶–≤–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
						const isValid = color === expectedColor // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è

						spans.push({ color, text, isValid })
					}
				}

				return spans
			}, expectedColors)
		}

		// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
		const validateColors = spans => {
			let isAllElementsValid = true

			spans.forEach((span, index) => {
				if (span.isValid) {
					console.log(
						`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${index + 1} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: ${span.color}, —Ç–µ–∫—Å—Ç: "${
							span.text
						}"`
					)
				} else {
					isAllElementsValid = false

					console.error(
						`‚ùå –û—à–∏–±–∫–∞! –≠–ª–µ–º–µ–Ω—Ç ${index + 1}: –æ–∂–∏–¥–∞–ª—Å—è —Ü–≤–µ—Ç ${
							expectedColors[index % 4]
						}, –Ω–æ –ø–æ–ª—É—á–µ–Ω ${span.color}`
					)
				}
			})

			return isAllElementsValid
		}

		// üî• –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤
		let previousSpans = await getSpans()
		console.log('üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è span:', previousSpans)
		const isValidColorOfElements = validateColors(previousSpans)

		if (isValidColorOfElements) {
			const tl = previousSpans.map(previousSpan => {
				const { isValid, ...newPreviousSpan } = previousSpan // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∫—Ä–æ–º–µ isValid
				return newPreviousSpan
			})

			const now = new Date()
			const timestamp = `${now.getFullYear()}-${(now.getMonth() + 1)
				.toString()
				.padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')} ${now
				.getHours()
				.toString()
				.padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now
				.getSeconds()
				.toString()
				.padStart(2, '0')}`

			const data = {
				currencie: currencies[index],
				tl,
				timestamp,
			}

			try {
				const response = await fetch(`${API_URL}/data`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(data),
				})

				const result = await response.json()
				console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result)
			} catch (error) {
				console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
			}
		}

		// üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 20 –º—Å
		setInterval(async () => {
			const currentSpans = await getSpans()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
			let hasChanges = false

			currentSpans.forEach((span, index) => {
				if (
					span.color !== previousSpans[index]?.color ||
					span.text !== previousSpans[index]?.text
				) {
					hasChanges = true
				}
			})

			// –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
			if (hasChanges) {
				console.log('tl –∏–∑–º–µ–Ω–∏–ª—Å—è: ')
				console.log(currentSpans)
				const isValidColorOfElements = validateColors(currentSpans)
				previousSpans = currentSpans

				if (isValidColorOfElements) {
					const tl = previousSpans.map(previousSpan => {
						const { isValid, ...newPreviousSpan } = previousSpan // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞, –∫—Ä–æ–º–µ isValid
						return newPreviousSpan
					})

					const now = new Date()
					const timestamp = `${now.getFullYear()}-${(now.getMonth() + 1)
						.toString()
						.padStart(2, '0')}-${now
						.getDate()
						.toString()
						.padStart(2, '0')} ${now
						.getHours()
						.toString()
						.padStart(2, '0')}:${now
						.getMinutes()
						.toString()
						.padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`

					const data = {
						currencie: currencies[index],
						tl,
						timestamp,
					}

					try {
						const response = await fetch(`${API_URL}/data`, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify(data),
						})

						const result = await response.json()
						console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result)
					} catch (error) {
						console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
					}
				}
			}
		}, 20)

		await delay(3000)
	}
})()
